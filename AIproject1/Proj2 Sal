
public class Proj2 {
	public static void main(String args[]) {

		double superCount=0;
		boolean search;
		for(int i=0;i<1;i++) {
			Cell[][] area=genArray();
			Cell temp=Search2(area);
			search=false;
			double p=Math.random();
			if(p>temp.terrain&&temp.target==true) {
				search=true;
			}
			int count=1;
			while(search==false) {
				//System.out.println(temp.x+", "+temp.y);
				temp=Search2(area);
				p=Math.random();
				if(p>temp.terrain&&temp.target==true) {
					search=true;
				}
				count++;
			}
			superCount+=count;
		}
		System.out.println(superCount/1);
		
		return;
	}
	public static Cell Search1(Cell[][] area) {
		Cell max=area[0][0];
		double temp;
		int coor1=0;
		int coor2=0;
		for(int i=0;i<50;i++) {
			for(int j=0;j<50;j++) {
				if(area[i][j].probOfFinding>max.probOfFinding) {
					max=area[i][j];
					coor1=i;
					coor2=j;
					max.x=i;
					max.y=j;
				}
			}
		}
		temp=max.probOfFinding*(1.0-max.terrain)/2499.0;
		max.probOfFinding=max.probOfFinding*max.terrain;
		for(int i=0;i<50;i++) {
			for(int j=0;j<50;j++) {
				if(i==coor1&&j==coor2) {
					continue;
				}
				area[i][j].probOfFinding+=temp;
			}
		}
		return max;
	}
	
	public static Cell Search2(Cell[][] area) {
		Cell max=area[0][0];
		double temp;
		int coor1=0;
		int coor2=0;
		for(int i=0;i<50;i++) {
			for(int j=0;j<50;j++) {
				if(area[i][j].probOfFinding*(1.0-area[i][j].terrain)>max.probOfFinding*(1.0-max.terrain)) {
					max=area[i][j];
					coor1=i;
					coor2=j;
					max.x=i;
					max.y=j;
				}
			}
		}
		temp=max.probOfFinding*(1.0-max.terrain)/2499.0;
		max.probOfFinding=max.probOfFinding*max.terrain;
		for(int i=0;i<50;i++) {
			for(int j=0;j<50;j++) {
				if(i==coor1&&j==coor2) {
					continue;
				}
				area[i][j].probOfFinding+=temp;
			}
		}
		return max;
	}
	
	public static Cell Search2L(Cell[][] area, Cell start) {
		Cell max=area[start.x][start.y];
		double temp;
		int coor1=start.x;
		int coor2=start.y;
		int[][] adj = searchAdj(start, area);
		
		// this part is for LOCAL searching 
		for(int i=0;i<4;i++) {
			
				if(adj[i][0]<=-1 || adj[i][1]<= -1)
				{
					continue;
				}
				else
				{
				if(area[adj[i][0]][adj[i][1]].probOfFinding*(1.0-area[adj[i][0]][adj[i][1]].terrain)>max.probOfFinding*(1.0-max.terrain)) {
					max=area[adj[i][0]][adj[i][1]];
					coor1=adj[i][0];
					coor2=adj[i][1];
					max.x=adj[i][0];
					max.y=adj[i][1];
					
				}
				}
			
		}
		temp=max.probOfFinding*(1.0-max.terrain)/2499.0;
		max.probOfFinding=max.probOfFinding*max.terrain;
		for(int i=0;i<50;i++) {
			for(int j=0;j<50;j++) {
				if(i==coor1&&j==coor2) {
					continue;
				}
				area[i][j].probOfFinding+=temp;
			}
		}
	
		return max;
	}

	public static Cell Search1L(Cell[][] area, Cell start) {
		Cell max=area[start.x][start.y];
		double temp;
		int coor1=start.x;
		int coor2=start.y;
		int[][] adj = searchAdj(start, area);
	
			
		
		// this part is for LOCAL searching 
		for(int i=0;i<4;i++) {
			
				if( (adj[i][0] <=-1)|| adj[i][1]<=-1)
				{
					continue;
				}
				else
				{
					
				if(area[adj[i][0]][adj[i][1]].probOfFinding > max.probOfFinding) {
					max=area[adj[i][0]][adj[i][1]];
					coor1=adj[i][0];
					coor2=adj[i][1];
					max.x=adj[i][0];
					max.y=adj[i][1];
					
				}
				
			}
		}
		temp=max.probOfFinding*(1.0-max.terrain)/2499.0;
		max.probOfFinding=max.probOfFinding*max.terrain;
		for(int i=0;i<50;i++) {
			for(int j=0;j<50;j++) {
				if(i==coor1&&j==coor2) {
					continue;
				}
				area[i][j].probOfFinding+=temp;
			}
		}
		
		return max;
	}
	
	// this returns a 2 x2 array of the Cells of the current adj location
	
	public static int[][] searchAdj(Cell temp, Cell[][] grid)
	  {
	  	int[][] returner = new int[4][2];
		
		//0== up 1 == right == 2==down 3==left
		// -1 not a valid 
		// first we can set up the coordinates  then check if out of bounds
		
	  	
		// up
		if(temp.x -1 >=0)
		{
			returner[0][0]= (int) (temp.x)-1;
			returner[0][1]= ((int)temp.y);
		}
		else
		{
			returner[0][0]= -1;
			returner[0][1]=-1;
		}
		//right
		if(temp.y +1 <50)
		{
			
			returner[1][0]=temp.x;
			returner[1][1]=temp.y+1;
		}
		else
		{
			returner[0][1]= -1;
			returner[1][1]=-1;
		}
		// down
		if(temp.x +1 <50)
		{
			
			returner[2][0]=temp.x+1;
			returner[2][1]=temp.y;
		}
		else
		{
			returner[2][0]=-1;
			returner[2][1]=-1;
		}
		// left
		if(temp.y -1 >=0)
		{
			returner[3][0]=temp.x;
			returner[3][1]=temp.y-1;
		}
		else
		{
			returner[3][0]=-1;
			returner[3][1]=-1;
		}
		
		//System.out.println(returner[0][0]+"  "+returner[1][1]+" "+returner[2][0]+" "+returner[0][0] );
		return returner;
		
	}
	public static Cell[][] genArray() {
		Cell[][] area=new Cell[50][50];
		double k=1.0/2500.0;
		for(int i=0;i<50;i++) {
			for(int j=0;j<50;j++) {
				double p=Math.random();
				double temp=0.3;
				if(p<=.5) {
					temp=0.7;
				}
				if(p<=.2) {
					temp=0.1;
				}
				if(p>.8) {
					temp=0.9;
				}
				area[i][j]= new Cell(temp,k);
				area[i][j].target=false;
			}
		}
		int coordinate1=(int)(Math.random()*50);
		int coordinate2=(int)(Math.random()*50);
		area[coordinate1][coordinate2].target=true;
		
		return area;
	}	
}
