import java.util.*;
//need to put in memory for picking

// edit max of adj

public static LinkedList<Coordinates> closedlist = new LinkedList<Coordinates>();

public class partone
{

public static char[][] knwgrid;
public static int targetx;
public static int targety;
public static double[][] containingP;

public static double[][] findingP;

  public static void main(String[] args)
  {
  	final int DIM= 50
    char [][] grid = genArray( DIM);
    
    printChar(grid);
    //int knowlege of agent
    // in both prabailty arrays for breaking ties
    
    
    for(int i=0; i< DIM;i++)
    {
    	for(int j=0;j<DIM;j++)
	{
		knwgrid[i][j]='?';
		containsP[i][j]=(1/2500);
		findP[i][j]=(1/2500);
		
	}
    }
    
    // now to make the target just random *50
    
     targetx = (int)(Math.random()*DIM);
     targety = (int)(Math.random()*DIM)
    
    System.out.println("the target is at: "+targetx +" "+targety); 
    
    // we need to count total number of terrain
    int totalsearches =0;
    int numoff=0;
    int numofh=0;
    int numofo=0;
    int numoffc=0;
    boolean found =false ;
    
    //first count terrain
    
    for( int g=0;g<DIM;g++)
    {
    	for(int h=0;h<DIM;h++)
	{
		if( grid[g][h] =='F')
		{
			numoff++;
		}
		if( grid[g][h] =='H')
		{
			numofh++;
		}
		if( grid[g][h] =='O')
		{
			numofo++;
		}
		if( grid[g][h] =='C')
		{
			numoff++;
		}
	}
   }
		// now pick first choice uniformally at random
	int pickinga= (int)(Math.random()*50);
	int pickingb= (int)(Math.random()*50);
		
		
    
    // this is basically the examine
    
    
    do
    {
    found= examine(grid, pickinga, pickingb);
    
     // do math about loc
    // thats not random
    
    totalsearches++;
    }
    while(!found);
    
    System.out.println("great we found it in: "+totalsearches+" tries");
    
    
  
  }
  
  
  // return a 4 by 4 int arrray with x and y targets of adj but -1 if not a valid adj
  public static int[][] searchAdj(int x ,int y)
  {
  	int[][] returner = new int[4][4];
	
	//0== up 1 == right == 2==down 3==left
	// -1 not a valid adj
	// first we can set up the coordinates  then check if out of bounds
	
	
	// up
	returner[0][0]=x--;
	returner[0][1]=y;
	
	// right
	returner[0][0]=x;
	returner[0][1]=y++;
	
	// down
	returner[0][0]=x++;
	returner[0][1]=y;
	
	// left
	returner[0][0]=x;
	returner[0][1]=y--;
	
	
	// now change if out of bounds
	// up
	if( x<=0)
	{
		returner[0][0] = -1;
		returner[0][1] = -1;
	}
	//down
	if( x>=50)
	{
		returner[2][0] = -1;
		returner[2][1] = -1;
	}
	
	// left
	if( y<=0)
	{
		returner[3][0] = -1;
		returner[3][1] = -1;
	}
	// right
	if( y>=50)
	{
		returner[1][0] = -1;
		returner[1][1] = -1;
	}
	return returner;
	
}

// we will need to have a function  that returns the x y in an array in a
// P array thats what this does
public static int[][] maxIn( double[][] compare)
{
	double  ret =0;
	int[][] point = new { 0,0};
	for(int i=0;i<50;i++)
	{
		for(int j=0;j<50;j++)
		{
			if(compare[i][j] > ret)
			{
				ret= compare[i][j];
				point[0]=i;
				point[1]=j;
			}
		}
	}
	return point;
}


// we willneed a fuction that returns the max of adj points aswell


public static int[][] maxOfAdj( double[][] compare, int x ,int y)
{
	double  ret =0;
	int[][] point =searchAdj( x,y);
	int[] returner = new {0,0};
	
	for(int i=0;i<4;i++)
	{
		if(point[i][0]<0 || point[i][1]<0)
		{
			continue;
		}
		else
		{
			if(compare[point[i][0]][point[i][1]] > ret)
			{
				ret= compare[point[i][0]][point[i][1]];
				returner[0]=point[i][0];
				returner[1]=point[i][1];
			}
		}
	}
	return returner;
}
// this fuction returns the point that has the max P out of the whole array of points

public static int[][] maxOfPointArray(double compare, int[][] point)
{
	double  ret =0;
	
	int[] returner = new {0,0};
	
	for(int i=0;i<point.length;i++)
	{
		if(point[i][0]<0 || point[i][1]<0)
		{
			continue;
		}
		else
		{
			if(compare[point[i][0]][point[i][1]] > ret)
			{
				ret= compare[point[i][0]][point[i][1]];
				returner[0]=point[i][0];
				returner[1]=point[i][1];
			}
		}
	}
	return returner;

}
  public static boolean examine( char[][] grid, int x,int y)
  {
  	// false negative stuff here 
	double random = Math.random();// recall its between 0-1
	//
	
	if( x==targetx && y=targety)
	{
		if( grid[x][y]=='F' && random <=.1)
		{
		return false;
		}
		if(grid[x][y]=='H' && random <=.3)
		{
		return false;
		}
		if(grid[x][y]=='O' && random <=.7)
		{
		return false;
		}
		if(grid[x][y]=='C' && random <=.9)
		{
		return false;
		}
		return true;
	}
	else
	{
		return false ;
	}
}
  public static void printChar( char[][] temp)
{
	
	
	for(int i=0;i<temp.length;i++)
	{
		for(int j=0;j<temp.length;j++)
		{
			System.out.print(""+temp[i][j]+" ");
		}
		System.out.println();
	}
}
  public static char[][] genArray(int n) {
		char [][] arr= new int [n][n];
		double rand;
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				if(i==0 && j==0) {
					arr[i][j]=0;
					continue;
				}
				if(i==n-1 && j==n-1) {
					arr[i][j]=0;
					continue;
				}
				rand=Math.random();
				if(rand<=.2) {
					arr[i][j]='F';
					
				}
				else
				{
				if(rand<=.5) {
					arr[i][j]='H';
				}
				else
				{
					if(rand<=.8)
					{
						arr[i][j]='O';
					}
					else
					{
					arr[i][j]='C';
					}
				}
				}
				
			}
		}
		return arr;
	}

  
}
